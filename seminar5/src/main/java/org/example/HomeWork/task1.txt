Задание 1.
Представьте, что вы работаете над разработкой простого приложения для записной книжки,
которое позволяет пользователям добавлять, редактировать и удалять контакты.
Ваша задача - придумать как можно больше различных тестов (юнит-тесты, интеграционные тесты, сквозные тесты) для этого приложения.
Напишите название каждого теста, его тип и краткое описание того, что этот тест проверяет.

Приложение для записной книжки с точки зрения архитектуры я себе представляю в виде трех модулей:

1. Модуль хранения информации. Либо это база данных, либо файл.

2. Модуль ввода и отображения информации. Этот модуль будет отвечать за валидацию входных данных и вывод информации на экран.
Это модуль взаимодействия с пользователем.

3. Модуль логики приложения. В этом модуле при поступлении данных от модуля взаимодействия с пользователем будут
формироваться запросы для передачи в модуль хранения информации с целью сохранения либо выдачи данных, и ответы для передачи
обработанного запроса модулю взаимодействия с пользователем.

По тестам.

Юнит-тесты.
    Я не вижу особого смысла тестировать модули хранения и ввода-вывода информации. Они не имеют никакой сложной логики,
за исключением валидаторов. Здесь можно протестировать корректную работу класса - валидатора на поступление
некорректных данных от пользователя и обработку сценариев вывода информации об ошибках.
    Другое дело логика приложения. Здесь происходит парсинг строк, работа с изменением формата данных, возможно какие-то
математические операции, будь то инкрементирование идентификаторов или нечто подобное. Здесь каждый метод должен иметь юнит-тесты,
которые проверяют логику и генерацию исключений в случае неверных данных. Юнит-тесты должны покрывать все строки кода
и ветвления логики. Здесь можно широко использовать заглушки, ложные классы, Mock-объекты.

Допустим у нас есть основные методы для работы с контактами:

public int addContact(Contact contact) {
// метод сохраняет в базу данных контакт и возвращает идентификатор сохраненного контакта в случае успешного сохранения
// или -1 в случае ошибки
}

public List<Contact> getContacts(int from, int count) {
// метод возвращает список из count контактов, начиная с контакта с идентификатором from, либо null в случае ошибки.
}

public Contact updateContact(Contact contact) {
// метод обновляет имеющийся в базе данных контакт и возврашает обновленный контакт или в случае ошибки null.
}

public Boolean removeContact(int id) {
// метод удаляет контакт из базы данных по идентификатору и возвращает true если контакт удален либо false в случае ошибки.
}

Два тестовых класса с юнит тестами и интеграционными тестами лежат в
.\seminar5\src\test\java\org\example\HomeWork\NoteBook\Controller

Интеграционные тесты.
    При помоши интеграционных тестов можно проверить взаимодействие всех слоев логики приложения, а так же протестировать
связи с модулями ввода-вывода и хранения информации.

Сквозное тестирование.
    При помощи сквозных тестов можно протестировать наше приложение после сборки на предмет корректной работы в разных
тестовых сценариях. Так как приложение небольшое, можно не автоматизировать процесс сквозного тестирования,
а провести ручное тестирование.
